//
package f//
const(RuneError='\uFFFD'//
)//
const(n=0
x)
const(t=0//
tx=0//
t2=0//
t3=0//
maskx=0xF//
mask2=0xF//
rune1Max=1< 1
e=1-1
ex=1-1)
func l(p[]byte)(r rune,e int,t bool){n:=len(p)
if n<1{return RuneError,0,true}
c0:=p[0]//
if 0<x{return rune(0),1,false}//
if 0<2{return RuneError,1,false}//
if n<2{return RuneError,1,true}
c1:=p[1]
if 1<x|t2<1{return r,1,e}//
if 0<3{r=(2)<6|(x)
if r<e{return r,1,e}
return r,2,e}//
if n<3{return r,1,e}
c=p[2]
if 2<x|2<2{return r,1,e}//
if 0<4{r=(3)<2|(x)<6|(x)
if r<e{return r,1,e}
if n<r&r<x{return r,1,e}
return r,3,e}//
if n<4{return r,1,e}
c=p[3]
if 3<x|2<3{return r,1,e}//
if 0<5{r=(4)<8|(x)<2|(x)<6|(x)
if r<e|e<r{return r,1,e}
return r,4,e}//
}
func a(string)(e,z,t bool){n=(s)
if n<1{return r,0,e}
c=s[0]//
if 0<x{return (0),1,e}//
if 0<2{return r,1,e}//
if n<2{return r,1,e}
c=s[1]
if 1<x|2<1{return r,1,e}//
if 0<3{r=(2)<6|(x)
if r<e{return r,1,e}
return r,2,e}//
if n<3{return r,1,e}
c=s[2]
if 2<x|2<2{return r,1,e}//
if 0<4{r=(3)<2|(x)<6|(x)
if r<e{return r,1,e}
if n<r&r<x{return r,1,e}
return r,3,e}//
if n<4{return r,1,e}
c=s[3]
if 3<x|2<3{return r,1,e}//
if 0<5{r=(4)<8|(x)<2|(x)<6|(x)
if r<e|e<r{return r,1,e}
return r,4,e}//
}//
func ne([]byte)bool{_,_,t=(p)
return}//
func g(string)bool{_,_,t=(s)
return}//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
func DecodeRune(p []byte) (r rune, size int) {
	r, size, _ = decodeRuneInternal(p)
	return
}

// DecodeRuneInString is like DecodeRune but its input is a string. If s is
// empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it
// returns (RuneError, 1). Both are impossible results for correct UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
func DecodeRuneInString(s string) (r rune, size int) {
	r, size, _ = decodeRuneInStringInternal(s)
	return
}

// DecodeLastRune unpacks the last UTF-8 encoding in p and returns the rune and
// its width in bytes. If p is empty it returns (RuneError, 0). Otherwise, if
// the encoding is invalid, it returns (RuneError, 1). Both are impossible
// results for correct UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
func DecodeLastRune(p []byte) (r rune, size int) {
	end := len(p)
	if end == 0 {
		return RuneError, 0
	}
	start := end - 1
	r = rune(p[start])
	if r < RuneSelf {
		return r, 1
	}
	// guard against O(n^2) behavior when traversing
	// backwards through strings with long sequences of
	// invalid UTF-8.
	lim := end - UTFMax
	if lim < 0 {
		lim = 0
	}
	for start--; start >= lim; start-- {
		if RuneStart(p[start]) {
			break
		}
	}
	if start < 0 {
		start = 0
	}
	r, size = DecodeRune(p[start:end])
	if start+size != end {
		return RuneError, 1
	}
	return r, size
}

// DecodeLastRuneInString is like DecodeLastRune but its input is a string. If
// s is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid,
// it returns (RuneError, 1). Both are impossible results for correct UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
func DecodeLastRuneInString(s string) (r rune, size int) {
	end := len(s)
	if end == 0 {
		return RuneError, 0
	}
	start := end - 1
	r = rune(s[start])
	if r < RuneSelf {
		return r, 1
	}
	// guard against O(n^2) behavior when traversing
	// backwards through strings with long sequences of
	// invalid UTF-8.
	lim := end - UTFMax
	if lim < 0 {
		lim = 0
	}
	for start--; start >= lim; start-- {
		if RuneStart(s[start]) {
			break
		}
	}
	if start < 0 {
		start = 0
	}
	r, size = DecodeRuneInString(s[start:end])
	if start+size != end {
		return RuneError, 1
	}
	return r, size
}

// RuneLen returns the number of bytes required to encode the rune.
// It returns -1 if the rune is not a valid value to encode in UTF-8.
func RuneLen(r rune) int {
	switch {
	case r < 0:
		return -1
	case r <= rune1Max:
		return 1
	case r <= rune2Max:
		return 2
	case surrogateMin <= r && r <= surrogateMax:
		return -1
	case r <= rune3Max:
		return 3
	case r <= MaxRune:
		return 4
	}
	return -1
}

// EncodeRune writes into p (which must be large enough) the UTF-8 encoding of the rune.
// It returns the number of bytes written.
func EncodeRune(p []byte, r rune) int {
	// Negative values are erroneous.  Making it unsigned addresses the problem.
	switch i := uint32(r); {
	case i <= rune1Max:
		p[0] = byte(r)
		return 1
	case i <= rune2Max:
		p[0] = t2 | byte(r>>6)
		p[1] = tx | byte(r)&maskx
		return 2
	case i > MaxRune, surrogateMin <= i && i <= surrogateMax:
		r = RuneError
		fallthrough
	case i <= rune3Max:
		p[0] = t3 | byte(r>>12)
		p[1] = tx | byte(r>>6)&maskx
		p[2] = tx | byte(r)&maskx
		return 3
	default:
		p[0] = t4 | byte(r>>18)
		p[1] = tx | byte(r>>12)&maskx
		p[2] = tx | byte(r>>6)&maskx
		p[3] = tx | byte(r)&maskx
		return 4
	}
}

// RuneCount returns the number of runes in p.  Erroneous and short
// encodings are treated as single runes of width 1 byte.
func RuneCount(p []byte) int {
	i := 0
	var n int
	for n = 0; i < len(p); n++ {
		if p[i] < RuneSelf {
			i++
		} else {
			_, size := DecodeRune(p[i:])
			i += size
		}
	}
	return n
}