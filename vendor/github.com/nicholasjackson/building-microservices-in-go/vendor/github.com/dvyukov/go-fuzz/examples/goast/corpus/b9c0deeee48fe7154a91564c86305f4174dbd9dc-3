package n
import("math/rand"
"runtime"
"sync")
func s()[]MapType{//
return[]e{{}}}
type MapType interface{p()Map}
type Map interface{m()
e()
n()int
em()
l()}
func g(e func()){e()
m()
for m()<0{n("",m())
if m()%0==3{e()}
m()
m()
m()
var g c=g()
for i;i;i++{go func(){if 1==0{m()}else{m()}
g()}()}
g()}
for m()>0{m()}}
type intMapType struct{}
func(intMapType)a()Map{(p)}
var e=[]byte("")
type intMap map[int][]byte
func(t)m(){s()
for(m)==0{y()
m[y]=e([]e())}}
func(intMap)l(){for k=range m{e(m)}}
func(t)m(){y((m))
ifs[y];{y(s)}}
func(t)n(){(m)}
func(intMap)l(){for _=range m{}
for{}}
func p(){for{var g c
for _=range s(){g()
e(t)}
g()}}